# Generated by Django 3.2.5 on 2021-12-09 18:33

import django.utils.timezone
import model_utils.fields
import netfields.fields
from django.db import migrations, models
# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# ngen.migrations.0007_merge_ip_mask
# ngen.migrations.0013_rename_ip_host_cidr
# ngen.migrations.0015_copy_host_to_network
# ngen.migrations.0016_network_parent_default
# ngen.migrations.0017_incident_origin_to_network
# ngen.migrations.0020_delete_rdap_networks
# ngen.migrations.0022_priority_repited_deletion
# ngen.migrations.0025_contact_change_case_for_priority
# ngen.migrations.0028_delete_network_null_relation
# ngen.migrations.0030_admin_to_contacts
# ngen.migrations.0032_alter_contact_username
from django.db.models import Count

from ngen.models import Network


def set_people(apps, schema_editor):
    networks = apps.get_model('ngen', 'Network')
    for row in networks.objects.all():
        if row.ip:
            row.cidr = row.ip.ip.exploded + '/' + str(row.ip_mask)
            row.save()


def set_cidr(apps, schema_editor):
    hosts = apps.get_model('ngen', 'Host')
    for row in hosts.objects.all():
        if row.ip:
            row.cidr = row.ip
            row.save()


def copy_host_to_network(apps, schema_editor):
    hosts = apps.get_model('ngen', 'Host')
    networks = apps.get_model('ngen', 'Host')
    for host in hosts.objects.all():
        if host.domain:
            networks.objects.get_or_create(domain=host.address.address)
        elif host.cidr:
            networks.objects.get_or_create(cidr=host.address.address)


def network_parent_default(apps, schema_editor):
    networks = apps.get_model('ngen', 'Network')
    default_network = networks.objects.get_or_create(cidr="0.0.0.0/0", domain='')[0]
    for network in networks.objects.all():
        if not network.parent and not network.cidr.exploded == '0.0.0.0/0':
            network.parent = default_network
            network.save()


def incident_origin_to_network(apps, schema_editor):
    incidents = apps.get_model('ngen', 'Incident').objects.all()
    network = None
    for incident in incidents:
        if incident.origin.domain:
            network = Network.objects.get(domain=incident.origin.address.address)
        elif incident.origin.cidr:
            network = Network.objects.get(cidr=incident.origin.address.address)
        incident.network = network
        incident.save()


def delete_rdap_networks(apps, schema_editor):
    rdap = apps.get_model('ngen', 'Network').objects.filter(type='rdap').filter(incident__isnull=True)
    rdap.update(parent=None)
    apps.get_model('ngen', 'Network').objects.filter(parent_id__in=rdap).update(parent=None)
    rdap.delete()
    apps.get_model('ngen', 'Network').objects.filter(parent__isnull=True).exclude(cidr='0.0.0.0/0').update(
        parent=apps.get_model('ngen', 'Network').objects.get(cidr='0.0.0.0/0'))


def update_priority(manager):
    manager.objects.filter(priority=7).update(priority=3)
    manager.objects.filter(priority=9).update(priority=2)
    manager.objects.filter(priority=4).update(priority=2)
    manager.objects.filter(priority=8).update(priority=6)


def priority_repited_deletion(apps, schema_editor):
    update_priority(apps.get_model('ngen', 'Incident'))
    update_priority(apps.get_model('ngen', 'IncidentDetected'))
    update_priority(apps.get_model('ngen', 'IncidentDecision'))
    apps.get_model('ngen', 'IncidentPriority').objects.filter(pk=7).delete()
    apps.get_model('ngen', 'IncidentPriority').objects.filter(pk=9).delete()
    apps.get_model('ngen', 'IncidentPriority').objects.filter(pk=4).delete()
    apps.get_model('ngen', 'IncidentPriority').objects.filter(pk=8).delete()


def contact_change_case_for_priority(apps, schema_editor):
    for contact in apps.get_model('ngen', 'Contact').objects.all():
        contact.priority = apps.get_model('ngen', 'IncidentPriority').objects.get(code=contact.contact_case.level)
        contact.save()


def delete_network_null_relation(apps, schema_editor):
    apps.get_model('ngen', 'NetworkAdmin').objects.filter(network__isnull=True).delete()
    apps.get_model('ngen', 'NetworkEntity').objects.filter(network__isnull=True).delete()


def admin_to_contacts(apps, schema_editor):
    for network in apps.get_model('ngen', 'Network').objects.all():
        if network.network_admin:
            network.network_admin.contact_set.update(name=network.network_admin.name)
            network.contacts.set(network.network_admin.contact_set.all())
            network.save()


def remove_duplicates(apps, schema_editor):
    duplicates = apps.get_model('ngen', 'Contact').objects.values('username').annotate(
        email_count=Count('username')).filter(email_count__gt=1)
    for data in duplicates:
        contact_duplicate = apps.get_model('ngen', 'Contact').objects.filter(username=data['username']).order_by(
            'pk')
        for duplicate in contact_duplicate[1:]:
            contact_duplicate.first().network_set.add(*duplicate.network_set.all())
            duplicate.delete()


class Migration(migrations.Migration):
    replaces = [('ngen', '0001_initial'), ('ngen', '0002_auto_20210901_1929'), ('ngen', '0003_auto_20211020_2229'),
                ('ngen', '0004_auto_20211020_2232'), ('ngen', '0005_auto_20211023_0053'),
                ('ngen', '0006_auto_20211023_0101'), ('ngen', '0007_merge_ip_mask'),
                ('ngen', '0008_auto_20211023_0116'), ('ngen', '0009_alter_network_options'),
                ('ngen', '0010_auto_20211110_1526'), ('ngen', '0011_auto_20211119_2352'),
                ('ngen', '0012_network_parent'), ('ngen', '0013_rename_ip_host_cidr'), ('ngen', '0014_remove_host_ip'),
                ('ngen', '0015_copy_host_to_network'), ('ngen', '0016_network_parent_default'),
                ('ngen', '0017_incident_origin_to_network'), ('ngen', '0018_auto_20211129_2203'),
                ('ngen', '0019_alter_network_options'), ('ngen', '0020_delete_rdap_networks'),
                ('ngen', '0021_auto_20211203_2043'), ('ngen', '0022_priority_repited_deletion'),
                ('ngen', '0023_auto_20211204_2226'), ('ngen', '0024_auto_20211204_2234'),
                ('ngen', '0025_contact_change_case_for_priority'), ('ngen', '0026_auto_20211204_2342'),
                ('ngen', '0027_auto_20211205_0104'), ('ngen', '0028_delete_network_null_relation'),
                ('ngen', '0029_auto_20211205_1420'), ('ngen', '0030_admin_to_contacts'),
                ('ngen', '0031_auto_20211205_1521'), ('ngen', '0032_alter_contact_username'),
                ('ngen', '0033_auto_20211205_2131'), ('ngen', '0034_auto_20211206_1950'),
                ('ngen', '0035_auto_20211206_2002'), ('ngen', '0036_alter_priority_table'),
                ('ngen', '0037_alter_priority_table')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContactCase',
            fields=[
                ('slug', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('level', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
            ],
            options={
                'db_table': 'contact_case',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ip', models.CharField(blank=True, max_length=39, null=True)),
                ('domain', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('slug', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.IntegerField()),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
            ],
            options={
                'db_table': 'host',
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('renotification_date', models.DateTimeField(blank=True, null=True)),
                ('slug', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('evidence_file_path', models.CharField(blank=True, max_length=255, null=True)),
                ('report_message_id', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('ltd_count', models.IntegerField()),
                ('response_dead_line', models.DateTimeField(blank=True, null=True)),
                ('solve_dead_line', models.DateTimeField(blank=True, null=True)),
                ('active', models.IntegerField()),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('raw', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'incident',
            },
        ),
        migrations.CreateModel(
            name='IncidentCommentThread',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('incident_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('permalink', models.CharField(max_length=255)),
                ('is_commentable', models.IntegerField()),
                ('num_comments', models.IntegerField()),
                ('last_comment_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'incident_comment_thread',
            },
        ),
        migrations.CreateModel(
            name='IncidentImpact',
            fields=[
                ('slug', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=512, null=True)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
            ],
            options={
                'db_table': 'incident_impact',
            },
        ),
        migrations.CreateModel(
            name='IncidentState',
            fields=[
                ('slug', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
            ],
            options={
                'db_table': 'incident_state',
            },
        ),
        migrations.CreateModel(
            name='TaxonomyPredicate',
            fields=[
                ('slug', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=1024)),
                ('expanded', models.CharField(max_length=255)),
                ('version', models.IntegerField()),
                ('value', models.CharField(max_length=255, unique=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
            ],
            options={
                'db_table': 'taxonomy_predicate',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('firstname', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=180)),
                ('username', models.CharField(max_length=180)),
                ('password', models.CharField(max_length=255)),
                ('salt', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', models.CharField(blank=True, max_length=100, null=True)),
                ('enabled', models.IntegerField()),
                ('username_canonical', models.CharField(max_length=180, unique=True)),
                ('email_canonical', models.CharField(max_length=180, unique=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('confirmation_token', models.CharField(blank=True, max_length=180, null=True, unique=True)),
                ('password_requested_at', models.DateTimeField(blank=True, null=True)),
                ('roles', models.TextField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='TaxonomyValue',
            fields=[
                ('slug', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=1024)),
                ('expanded', models.CharField(max_length=255)),
                ('value', models.CharField(max_length=255, unique=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('version', models.IntegerField()),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('taxonomypredicate', models.ForeignKey(blank=True, db_column='taxonomyPredicate', null=True,
                                                        on_delete=django.db.models.deletion.DO_NOTHING,
                                                        to='ngen.taxonomypredicate')),
            ],
            options={
                'db_table': 'taxonomy_value',
            },
        ),
        migrations.AddField(
            model_name='taxonomypredicate',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.user'),
        ),
        migrations.CreateModel(
            name='StateEdge',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('discr', models.CharField(max_length=255)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('mail_admin', models.ForeignKey(blank=True, db_column='mail_admin', null=True,
                                                 on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                                 to='ngen.contactcase')),
                ('mail_assigned', models.ForeignKey(blank=True, db_column='mail_assigned', null=True,
                                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                                    to='ngen.contactcase')),
                ('mail_reporter', models.ForeignKey(blank=True, db_column='mail_reporter', null=True,
                                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                                    to='ngen.contactcase')),
                ('mail_team', models.ForeignKey(blank=True, db_column='mail_team', null=True,
                                                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                                to='ngen.contactcase')),
                ('newstate', models.ForeignKey(blank=True, db_column='newState', null=True,
                                               on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                               to='ngen.incidentstate')),
                ('oldstate', models.ForeignKey(blank=True, db_column='oldState', null=True,
                                               on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                               to='ngen.incidentstate')),
            ],
            options={
                'db_table': 'state_edge',
            },
        ),
        migrations.CreateModel(
            name='StateBehavior',
            fields=[
                ('slug', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('can_edit_fundamentals', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('can_edit', models.IntegerField()),
                ('can_enrich', models.IntegerField()),
                ('can_add_history', models.IntegerField()),
                ('can_comunicate', models.IntegerField()),
                ('discr', models.CharField(max_length=255)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
            ],
            options={
                'db_table': 'state_behavior',
            },
        ),
        migrations.CreateModel(
            name='NetworkEntity',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.CharField(blank=True, max_length=255, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('active', models.IntegerField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('is_removed', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'network_entity',
            },
        ),
        migrations.CreateModel(
            name='NetworkAdmin',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('active', models.IntegerField()),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('is_removed', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'network_admin',
            },
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ip_mask', models.IntegerField(blank=True, null=True)),
                ('ip', netfields.fields.InetAddressField(blank=True, max_length=39, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                                verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                                      verbose_name='modified')),
                ('domain', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, max_length=8, null=True)),
                ('country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('asn', models.CharField(blank=True, max_length=255, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('network_admin',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   to='ngen.networkadmin')),
                ('network_entity',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   to='ngen.networkentity')),
                ('is_removed', models.BooleanField(default=False)),
                ('cidr', netfields.fields.CidrAddressField(blank=True, max_length=43, null=True)),
            ],
            options={
                'db_table': 'network',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('data', models.JSONField()),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('response', models.JSONField(blank=True, null=True)),
                ('pending', models.IntegerField()),
                ('discr', models.CharField(max_length=255)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('incident', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               to='ngen.incident')),
            ],
            options={
                'db_table': 'message',
            },
        ),
        migrations.CreateModel(
            name='IncidentUrgency',
            fields=[
                ('slug', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
            ],
            options={
                'db_table': 'incident_urgency',
            },
        ),
        migrations.CreateModel(
            name='IncidentType',
            fields=[
                ('slug', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('is_classification', models.IntegerField(db_column='is_Classification')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('taxonomyvalue', models.ForeignKey(blank=True, db_column='taxonomyValue', null=True,
                                                    on_delete=django.db.models.deletion.DO_NOTHING,
                                                    to='ngen.taxonomyvalue')),
            ],
            options={
                'db_table': 'incident_type',
            },
        ),
        migrations.CreateModel(
            name='IncidentTlp',
            fields=[
                ('slug', models.CharField(max_length=45, primary_key=True, serialize=False)),
                ('rgb', models.CharField(blank=True, max_length=45, null=True)),
                ('when', models.CharField(blank=True, max_length=500, null=True)),
                ('encrypt', models.IntegerField(blank=True, null=True)),
                ('why', models.CharField(blank=True, max_length=500, null=True)),
                ('information', models.CharField(blank=True, max_length=10, null=True)),
                ('description', models.CharField(blank=True, max_length=150, null=True)),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
                ('code', models.IntegerField(blank=True, null=True)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
            ],
            options={
                'db_table': 'incident_tlp',
            },
        ),
        migrations.CreateModel(
            name='IncidentStateChange',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('incident_id', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('method', models.CharField(max_length=25)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 related_name='+', to='ngen.user')),
                ('responsable', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                  related_name='+', to='ngen.user')),
                ('state_edge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.stateedge')),
            ],
            options={
                'db_table': 'incident_state_change',
            },
        ),
        migrations.AddField(
            model_name='incidentstate',
            name='behavior',
            field=models.ForeignKey(blank=True, db_column='behavior', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.statebehavior'),
        ),
        migrations.AddField(
            model_name='incidentstate',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.user'),
        ),
        migrations.CreateModel(
            name='IncidentReport',
            fields=[
                ('slug', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('lang', models.CharField(max_length=2)),
                ('problem', models.TextField()),
                ('derivated_problem', models.TextField(blank=True, null=True)),
                ('verification', models.TextField(blank=True, null=True)),
                ('recomendations', models.TextField(blank=True, null=True)),
                ('more_information', models.TextField(blank=True, null=True)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('type', models.ForeignKey(blank=True, db_column='type', null=True,
                                           on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidenttype')),
            ],
            options={
                'db_table': 'incident_report',
            },
        ),
        migrations.CreateModel(
            name='IncidentPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('response_time', models.IntegerField()),
                ('solve_time', models.IntegerField()),
                ('code', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('unresponse_time', models.IntegerField()),
                ('unsolve_time', models.IntegerField()),
                ('active', models.IntegerField()),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('impact', models.ForeignKey(blank=True, db_column='impact', null=True,
                                             on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidentimpact')),
                ('urgency', models.ForeignKey(blank=True, db_column='urgency', null=True,
                                              on_delete=django.db.models.deletion.DO_NOTHING,
                                              to='ngen.incidenturgency')),
            ],
            options={
                'db_table': 'incident_priority',
            },
        ),
        migrations.AddField(
            model_name='incidentimpact',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.user'),
        ),
        migrations.CreateModel(
            name='IncidentFeed',
            fields=[
                ('slug', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
            ],
            options={
                'db_table': 'incident_feed',
            },
        ),
        migrations.CreateModel(
            name='IncidentDetected',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('incident_id', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('evidence_file_path', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('active', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('assigned', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               related_name='+', to='ngen.user')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 related_name='+', to='ngen.user')),
                ('feed', models.ForeignKey(blank=True, db_column='feed', null=True,
                                           on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidentfeed')),
                ('priority', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               to='ngen.incidentpriority')),
                ('reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               related_name='+', to='ngen.user')),
                ('state', models.ForeignKey(blank=True, db_column='state', null=True,
                                            on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidentstate')),
                ('tlp_state', models.ForeignKey(blank=True, db_column='tlp_state', null=True,
                                                on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidenttlp')),
                ('type', models.ForeignKey(blank=True, db_column='type', null=True,
                                           on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidenttype')),
            ],
            options={
                'db_table': 'incident_detected',
            },
        ),
        migrations.CreateModel(
            name='IncidentDecision',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('auto_saved', models.IntegerField()),
                ('active', models.IntegerField()),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 to='ngen.user')),
                ('feed', models.ForeignKey(blank=True, db_column='feed', null=True,
                                           on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidentfeed')),
                ('network', models.ForeignKey(blank=True, db_column='network', null=True,
                                              on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.network')),
                ('priority', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                               to='ngen.incidentpriority')),
                ('state', models.ForeignKey(blank=True, db_column='state', null=True,
                                            on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                            to='ngen.incidentstate')),
                ('tlp', models.ForeignKey(blank=True, db_column='tlp', null=True,
                                          on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidenttlp')),
                ('type', models.ForeignKey(blank=True, db_column='type', null=True,
                                           on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidenttype')),
                ('unresponded_state', models.ForeignKey(blank=True, db_column='unresponded_state', null=True,
                                                        on_delete=django.db.models.deletion.DO_NOTHING,
                                                        related_name='+', to='ngen.incidentstate')),
                ('unsolved_state', models.ForeignKey(blank=True, db_column='unsolved_state', null=True,
                                                     on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                                     to='ngen.incidentstate')),
            ],
            options={
                'db_table': 'incident_decision',
            },
        ),
        migrations.CreateModel(
            name='IncidentComment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('body', models.TextField()),
                ('ancestors', models.CharField(max_length=1024)),
                ('depth', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('state', models.IntegerField()),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             to='ngen.user')),
                ('thread', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                             to='ngen.incidentcommentthread')),
            ],
            options={
                'db_table': 'incident_comment',
            },
        ),
        migrations.AddField(
            model_name='incident',
            name='assigned',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='+', to='ngen.user'),
        ),
        migrations.AddField(
            model_name='incident',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.user'),
        ),
        migrations.AddField(
            model_name='incident',
            name='feed',
            field=models.ForeignKey(blank=True, db_column='feed', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidentfeed'),
        ),
        migrations.AddField(
            model_name='incident',
            name='network',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.network'),
        ),
        migrations.AddField(
            model_name='incident',
            name='origin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.host'),
        ),
        migrations.AddField(
            model_name='incident',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.incidentpriority'),
        ),
        migrations.AddField(
            model_name='incident',
            name='reporter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    related_name='+', to='ngen.user'),
        ),
        migrations.AddField(
            model_name='incident',
            name='state',
            field=models.ForeignKey(blank=True, db_column='state', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                    to='ngen.incidentstate'),
        ),
        migrations.AddField(
            model_name='incident',
            name='tlp_state',
            field=models.ForeignKey(blank=True, db_column='tlp_state', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidenttlp'),
        ),
        migrations.AddField(
            model_name='incident',
            name='type',
            field=models.ForeignKey(blank=True, db_column='type', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.incidenttype'),
        ),
        migrations.AddField(
            model_name='incident',
            name='unresponded_state',
            field=models.ForeignKey(blank=True, db_column='unresponded_state', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                    to='ngen.incidentstate'),
        ),
        migrations.AddField(
            model_name='incident',
            name='unsolved_state',
            field=models.ForeignKey(blank=True, db_column='unsolved_state', null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+',
                                    to='ngen.incidentstate'),
        ),
        migrations.AddField(
            model_name='host',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.user'),
        ),
        migrations.AddField(
            model_name='host',
            name='network',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.network'),
        ),
        migrations.CreateModel(
            name='ExtTranslations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locale', models.CharField(max_length=8)),
                ('object_class', models.CharField(max_length=255)),
                ('field', models.CharField(max_length=32)),
                ('foreign_key', models.CharField(max_length=64)),
                ('content', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ext_translations',
                'unique_together': {('locale', 'object_class', 'field', 'foreign_key')},
            },
        ),
        migrations.AddField(
            model_name='contactcase',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.user'),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('username', models.CharField(max_length=255)),
                ('encryption_key', models.CharField(blank=True, max_length=4000, null=True)),
                ('contact_type', models.CharField(max_length=255)),
                ('discr', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('contact_case', models.ForeignKey(blank=True, db_column='contact_case', null=True,
                                                   on_delete=django.db.models.deletion.DO_NOTHING,
                                                   to='ngen.contactcase')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                                 related_name='+', to='ngen.user')),
                ('network_admin',
                 models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                   to='ngen.networkadmin')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                           related_name='+', to='ngen.user')),
            ],
            options={
                'db_table': 'contact',
            },
        ),
        # migrations.AlterField(
        #     model_name='host',
        #     name='domain',
        #     field=django_dnf.fields.DomainNameField(blank=True, max_length=255, null=True),
        # ),
        migrations.AlterField(
            model_name='host',
            name='ip',
            field=models.GenericIPAddressField(blank=True, null=True),
        ),
        migrations.RenameField(
            model_name='host',
            old_name='created_at',
            new_name='created',
        ),
        migrations.RenameField(
            model_name='host',
            old_name='updated_at',
            new_name='modified',
        ),
        migrations.RemoveField(
            model_name='host',
            name='deletedat',
        ),
        migrations.AddField(
            model_name='host',
            name='is_removed',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='host',
            name='created',
            field=model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                      verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='host',
            name='modified',
            field=model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                           verbose_name='modified'),
        ),
        migrations.AddField(
            model_name='host',
            name='cidr',
            field=netfields.fields.CidrAddressField(blank=True, max_length=43, null=True),
        ),
        migrations.AlterField(
            model_name='host',
            name='ip',
            field=netfields.fields.InetAddressField(blank=True, max_length=39, null=True),
        ),
        migrations.AlterField(
            model_name='host',
            name='domain',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.RunPython(
            code=set_people,
        ),
        migrations.RemoveField(
            model_name='network',
            name='ip',
        ),
        migrations.RemoveField(
            model_name='network',
            name='ip_mask',
        ),
        migrations.AlterModelOptions(
            name='network',
            options={'ordering': ['cidr']},
        ),
        migrations.AlterField(
            model_name='host',
            name='cidr',
            field=netfields.fields.CidrAddressField(max_length=43, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='host',
            name='domain',
            field=models.CharField(max_length=255, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='host',
            name='ip',
            field=netfields.fields.CidrAddressField(max_length=43, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='network',
            name='cidr',
            field=netfields.fields.CidrAddressField(max_length=43, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='network',
            name='domain',
            field=models.CharField(max_length=255, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='host',
            name='domain',
            field=models.CharField(default=None, max_length=255, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='network',
            name='domain',
            field=models.CharField(default=None, max_length=255, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='network',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ngen.network'),
        ),
        migrations.RunPython(
            code=set_cidr,
        ),
        migrations.RemoveField(
            model_name='host',
            name='ip',
        ),
        migrations.RunPython(
            code=copy_host_to_network,
        ),
        migrations.RunPython(
            code=network_parent_default,
        ),
        migrations.RunPython(
            code=incident_origin_to_network,
        ),
        migrations.DeleteModel(
            name='ExtTranslations',
        ),
        migrations.RemoveField(
            model_name='incident',
            name='origin',
        ),
        migrations.RemoveField(
            model_name='network',
            name='asn',
        ),
        migrations.RemoveField(
            model_name='network',
            name='country_code',
        ),
        migrations.DeleteModel(
            name='Host',
        ),
        migrations.AlterModelOptions(
            name='network',
            options={'ordering': ['-cidr', 'domain']},
        ),
        migrations.RunPython(
            code=delete_rdap_networks,
        ),
        migrations.AlterModelOptions(
            name='network',
            options={'ordering': ['-cidr']},
        ),
        migrations.RemoveField(
            model_name='network',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='networkadmin',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='networkentity',
            name='is_removed',
        ),
        migrations.RunPython(
            code=priority_repited_deletion,
        ),
        migrations.RemoveField(
            model_name='incidenturgency',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='incidentpriority',
            name='impact',
        ),
        migrations.RemoveField(
            model_name='incidentpriority',
            name='slug',
        ),
        migrations.RemoveField(
            model_name='incidentpriority',
            name='urgency',
        ),
        migrations.DeleteModel(
            name='IncidentImpact',
        ),
        migrations.DeleteModel(
            name='IncidentUrgency',
        ),
        migrations.RemoveField(
            model_name='contact',
            name='deletedat',
        ),
        migrations.RemoveField(
            model_name='contact',
            name='discr',
        ),
        migrations.AddField(
            model_name='contact',
            name='priority',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING,
                                    to='ngen.incidentpriority'),
        ),
        migrations.RunPython(
            code=contact_change_case_for_priority,
        ),
        migrations.RemoveField(
            model_name='contact',
            name='contact_case',
        ),
        migrations.RemoveField(
            model_name='stateedge',
            name='mail_admin',
        ),
        migrations.RemoveField(
            model_name='stateedge',
            name='mail_assigned',
        ),
        migrations.RemoveField(
            model_name='stateedge',
            name='mail_reporter',
        ),
        migrations.RemoveField(
            model_name='stateedge',
            name='mail_team',
        ),
        migrations.DeleteModel(
            name='ContactCase',
        ),
        migrations.RemoveField(
            model_name='contact',
            name='user',
        ),
        migrations.RemoveField(
            model_name='networkadmin',
            name='active',
        ),
        migrations.RemoveField(
            model_name='networkadmin',
            name='slug',
        ),
        migrations.AlterField(
            model_name='contact',
            name='network_admin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    to='ngen.networkadmin'),
        ),
        migrations.RunPython(
            code=delete_network_null_relation,
        ),
        migrations.RenameField(
            model_name='contact',
            old_name='encryption_key',
            new_name='public_key',
        ),
        migrations.AddField(
            model_name='contact',
            name='role',
            field=models.CharField(
                choices=[('technical', 'technical'), ('administrative', 'administrative'), ('abuse', 'abuse'),
                         ('notifications', 'notifications'), ('noc', 'noc')], default='administrative', max_length=20),
        ),
        migrations.AddField(
            model_name='network',
            name='contacts',
            field=models.ManyToManyField(to='ngen.Contact'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='contact_type',
            field=models.CharField(choices=[('email', 'email'), ('telegram', 'telegram'), ('phone', 'phone')],
                                   default='email', max_length=20),
        ),
        migrations.RunPython(
            code=admin_to_contacts,
        ),
        migrations.RemoveField(
            model_name='contact',
            name='network_admin',
        ),
        migrations.RemoveField(
            model_name='network',
            name='network_admin',
        ),
        migrations.DeleteModel(
            name='NetworkAdmin',
        ),
        migrations.RunSQL(
            sql='SET CONSTRAINTS ALL IMMEDIATE;',
        ),
        migrations.RunPython(
            code=remove_duplicates,
        ),
        migrations.RunSQL(
            sql='SET CONSTRAINTS ALL DEFERRED;',
        ),
        migrations.AlterField(
            model_name='contact',
            name='username',
            field=models.CharField(max_length=255, unique=True),
        ),
        migrations.RenameField(
            model_name='contact',
            old_name='contact_type',
            new_name='type',
        ),
        migrations.AlterField(
            model_name='network',
            name='type',
            field=models.CharField(choices=[('internal', 'internal'), ('external', 'external')], default='internal',
                                   max_length=20),
        ),
        migrations.RenameModel(
            old_name='IncidentPriority',
            new_name='Priority',
        ),
        migrations.RenameField(
            model_name='contact',
            old_name='created_at',
            new_name='created',
        ),
        migrations.RenameField(
            model_name='contact',
            old_name='updated_at',
            new_name='modified',
        ),
        migrations.RunSQL(
            sql='SET CONSTRAINTS ALL IMMEDIATE;',
        ),
        migrations.AlterField(
            model_name='contact',
            name='created',
            field=model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False,
                                                      verbose_name='created'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='modified',
            field=model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False,
                                                           verbose_name='modified'),
        ),
        migrations.RunSQL(
            sql='SET CONSTRAINTS ALL DEFERRED;',
        ),
        migrations.AlterModelTable(
            name='priority',
            table='priority',
        ),
    ]
